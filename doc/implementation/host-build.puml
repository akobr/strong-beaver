@startuml host-init

class StrongBeaver <<static>> {
    IStrongBeaverBuilder CreateDefaultBuilder()
}
interface IStrongBeaverBuilder {
    IStrongBeaverBuilder WithContainer(IContainer)
    IStrongBeaverBuilder WithActivator(IActivator)
    IStrongBeaverContext Build()
}

interface IStrongBeaverContext {
    IContainer Container { get; }
}

interface IActivator {
    void Register(IContainer)
    void Initialise(IReadOnlyContainer)
}

class BaseActivator {
    +void RegisterInitialiser(IInitialisable)
    +void Register(IContainer)
    +void Initialise(IReadOnlyContainer)
    #void OnRegister()
    #void OnInitialise()
}

interface IContainer {

}

interface IReadOnlyContainer {
    TType Get<TType>()
    TType Get<TType>(string)
}

interface IWriteOnlyContainer {
    void Register<TInterface, TClass>()
    void Register<TInterface, TClass>(string)
    void Register<TClass>()
    void Register<TClass>(string)
    void Register<TType>(Func<TType>)
    void Register<TType>(Func<TType>, string)
}

IReadOnlyContainer <|.. IContainer
IWriteOnlyContainer <|.. IContainer
StrongBeaver --> IStrongBeaverBuilder
IStrongBeaverBuilder --> IStrongBeaverContext
IActivator <|.. BaseActivator

@enduml